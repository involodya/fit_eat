import logging
import base64
import io
import requests
import os
from datetime import datetime
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, PreCheckoutQueryHandler, CallbackQueryHandler
import aiohttp
import aiofiles
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
from config import (
    WELCOME_MESSAGE, HELP_MESSAGE, ANALYSIS_START_MESSAGE, ANALYSIS_COMPLETE_PREFIX,
    ERROR_MESSAGES, STARTUP_MESSAGES, TOKEN_ERROR_MESSAGES,
    FOOD_ANALYSIS_PROMPT, API_SETTINGS, SUBSCRIPTION_MESSAGES
)

# –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫
from subscription_manager import SubscriptionManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# URL –¥–ª—è OpenAI API
OPENAI_API_URL = "https://api.openai.com/v1/chat/completions"

class CalorieAnalyzerBot:
    def __init__(self):
        self.application = None
        self.subscription_manager = SubscriptionManager()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        self.SUBSCRIPTION_PRICE_STARS = 1  # 1 –∑–≤–µ–∑–¥–∞ –∑–∞ –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏
    
    async def check_user_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É"""
        return self.subscription_manager.has_access(user_id)
    
    async def send_subscription_offer(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
        keyboard = [[InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (1 ‚≠ê)", callback_data="buy_subscription")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            SUBSCRIPTION_MESSAGES['no_access'],
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        status = self.subscription_manager.get_user_status(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(WELCOME_MESSAGE)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
        if status['is_whitelisted']:
            await update.message.reply_text(SUBSCRIPTION_MESSAGES['whitelist_user'])
        elif status['has_subscription']:
            expiry = status['subscription_expiry']
            expiry_str = expiry.strftime("%d.%m.%Y %H:%M") if expiry else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            await update.message.reply_text(
                SUBSCRIPTION_MESSAGES['subscription_active'].format(expiry_str)
            )
        else:
            await self.send_subscription_offer(update)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(HELP_MESSAGE)
    
    async def subscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe"""
        user_id = update.effective_user.id
        status = self.subscription_manager.get_user_status(user_id)
        
        if status['is_whitelisted']:
            await update.message.reply_text(SUBSCRIPTION_MESSAGES['whitelist_user'])
        elif status['has_subscription']:
            expiry = status['subscription_expiry']
            expiry_str = expiry.strftime("%d.%m.%Y %H:%M") if expiry else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            await update.message.reply_text(
                SUBSCRIPTION_MESSAGES['subscription_active'].format(expiry_str)
            )
        else:
            await self.send_subscription_offer(update)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        status = self.subscription_manager.get_user_status(user_id)
        
        if status['is_whitelisted']:
            await update.message.reply_text(SUBSCRIPTION_MESSAGES['whitelist_user'])
        elif status['has_subscription']:
            expiry = status['subscription_expiry']
            expiry_str = expiry.strftime("%d.%m.%Y %H:%M") if expiry else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            await update.message.reply_text(
                SUBSCRIPTION_MESSAGES['subscription_active'].format(expiry_str)
            )
        else:
            await self.send_subscription_offer(update)
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "buy_subscription":
            await self.send_invoice(update, context)
    
    async def send_invoice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á—ë—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram Stars"""
        try:
            chat_id = update.effective_chat.id
            
            # –°–æ–∑–¥–∞—ë–º —Å—á—ë—Ç –¥–ª—è Telegram Stars
            await context.bot.send_invoice(
                chat_id=chat_id,
                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ö–∞–ª–æ—Ä–∏–π",
                description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π –≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –µ–¥—ã",
                payload="subscription_1_month",
                provider_token="",  # –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è Telegram Stars
                currency="XTR",  # Telegram Stars
                prices=[LabeledPrice("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", self.SUBSCRIPTION_PRICE_STARS)],
                start_parameter="subscription",
                photo_url="https://i.ibb.co/7tQTNpb0/photo-2025-09-28-12-23-13.jpg",
                photo_size=512,
                photo_width=512,
                photo_height=512,
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á—ë—Ç–∞: {e}")
            await update.effective_message.reply_text(SUBSCRIPTION_MESSAGES['payment_error'])
    
    async def precheckout_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        query = update.pre_checkout_query
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞
        if query.invoice_payload == "subscription_1_month":
            await query.answer(ok=True)
        else:
            await query.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–ª–∞—Ç—ë–∂")
    
    async def successful_payment_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        payment = update.message.successful_payment
        user_id = update.effective_user.id
        
        if payment.invoice_payload == "subscription_1_month":
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π
            success = self.subscription_manager.add_subscription(user_id, 30)
            
            if success:
                await update.message.reply_text(SUBSCRIPTION_MESSAGES['payment_success'])
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                await update.message.reply_text(SUBSCRIPTION_MESSAGES['payment_error'])
                logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            await update.message.reply_text(SUBSCRIPTION_MESSAGES['payment_error'])
    
    async def analyze_food_image(self, image_data: bytes) -> str:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI GPT-4 Vision API"""
        try:
            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            image_base64 = base64.b64encode(image_data).decode('utf-8')
            
            headers = {
                "Authorization": f"Bearer {OPENAI_API_KEY}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": API_SETTINGS['model'],
                "messages": [
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": FOOD_ANALYSIS_PROMPT
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image_base64}",
                                    "detail": API_SETTINGS['image_detail']
                                }
                            }
                        ]
                    }
                ],
                "max_completion_tokens": API_SETTINGS['max_completion_tokens'],
                "temperature": API_SETTINGS['temperature']
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(OPENAI_API_URL, json=payload, headers=headers) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result['choices'][0]['message']['content']
                    else:
                        error_text = await response.text()
                        logger.error(f"OpenAI API error: {response.status}, {error_text}")
                        return ERROR_MESSAGES['api_error']
                        
        except Exception as e:
            logger.error(f"Error in analyze_food_image: {str(e)}")
            return ERROR_MESSAGES['general_error']
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await self.check_user_access(user_id):
            await self.send_subscription_offer(update)
            return
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            analysis_message = await update.message.reply_text(ANALYSIS_START_MESSAGE)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            file = await context.bot.get_file(photo.file_id)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
            image_data = await file.download_as_bytearray()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            analysis_result = await self.analyze_food_image(bytes(image_data))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            final_message = f"{ANALYSIS_COMPLETE_PREFIX}{analysis_result}"
            await analysis_message.edit_text(final_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in handle_photo: {str(e)}")
            await update.message.reply_text(ERROR_MESSAGES['photo_processing'])
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await self.check_user_access(user_id):
            await self.send_subscription_offer(update)
            return
        
        await update.message.reply_text(ERROR_MESSAGES['not_photo_message'])
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
        
        if update and update.message:
            await update.message.reply_text(ERROR_MESSAGES['unexpected_error'])
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("subscribe", self.subscribe_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        self.application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        self.application.add_handler(PreCheckoutQueryHandler(self.precheckout_callback))
        self.application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, self.successful_payment_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.setup_handlers()
        
        logger.info(STARTUP_MESSAGES['bot_starting'])
        logger.info(STARTUP_MESSAGES['instruction'])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ - run_polling —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    if not TELEGRAM_BOT_TOKEN:
        print(TOKEN_ERROR_MESSAGES['telegram_missing'])
        return
    
    if not OPENAI_API_KEY:
        print(TOKEN_ERROR_MESSAGES['openai_missing'])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = CalorieAnalyzerBot()
    
    try:
        bot.run()
    except KeyboardInterrupt:
        logger.info(STARTUP_MESSAGES['user_stopped'])
    except Exception as e:
        logger.error(f"{TOKEN_ERROR_MESSAGES['critical_error_prefix']}{str(e)}")

if __name__ == "__main__":
    main()
