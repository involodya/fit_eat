import logging
import logging.handlers
import base64
import io
import requests
import os
import asyncio
from datetime import datetime, timedelta
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, PreCheckoutQueryHandler, CallbackQueryHandler
import aiohttp
import aiofiles
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
from config import (
    WELCOME_MESSAGE, HELP_MESSAGE, ANALYSIS_START_MESSAGE, ANALYSIS_COMPLETE_PREFIX,
    ERROR_MESSAGES, STARTUP_MESSAGES, TOKEN_ERROR_MESSAGES,
    FOOD_ANALYSIS_PROMPT, API_SETTINGS, SUBSCRIPTION_MESSAGES
)

# –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫
from subscription_manager import SubscriptionManager

# –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π
from payment_manager import PaymentManager

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('logs', exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–ø–∏—Å—å—é –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –§–æ—Ä–º–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(formatter)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π (–º–∞–∫—Å–∏–º—É–º 10MB, —Ö—Ä–∞–Ω–∏—Ç—å 5 —Ñ–∞–π–ª–æ–≤)
file_handler = logging.handlers.RotatingFileHandler(
    'logs/bot.log',
    maxBytes=10*1024*1024,  # 10 MB
    backupCount=5,
    encoding='utf-8'
)
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(console_handler)
logger.addHandler(file_handler)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º root logger –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[console_handler, file_handler]
)

# –¢–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# URL –¥–ª—è OpenAI API
OPENAI_API_URL = "https://api.openai.com/v1/chat/completions"

class CalorieAnalyzerBot:
    def __init__(self):
        self.application = None
        self.subscription_manager = SubscriptionManager()
        self.payment_manager = PaymentManager()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        self.SUBSCRIPTION_PRICE_STARS = 1  # 1 –∑–≤–µ–∑–¥–∞ –∑–∞ –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏
        self.SUBSCRIPTION_PRICE_RUB = float(os.getenv("SUBSCRIPTION_PRICE_RUB", "150.00"))
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π YooKassa
        # payment_id -> {'user_id': int, 'created_at': datetime, 'notified': bool}
        self.pending_payments = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        self.PAYMENT_CHECK_INTERVAL = int(os.getenv("PAYMENT_CHECK_INTERVAL", "60"))  # —Å–µ–∫—É–Ω–¥—ã
        self.PAYMENT_TIMEOUT = int(os.getenv("PAYMENT_TIMEOUT", "3600"))  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ó–∞–¥–∞—á–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.payment_check_task = None
    
    async def check_user_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É"""
        return self.subscription_manager.has_access(user_id)
    
    async def send_subscription_offer(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        keyboard = [
            [InlineKeyboardButton("‚≠ê Telegram Stars (1 ‚≠ê)", callback_data="payment_method_stars")],
            [InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (150 ‚ÇΩ)", callback_data="payment_method_card")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            SUBSCRIPTION_MESSAGES['no_access'],
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        status = self.subscription_manager.get_user_status(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(WELCOME_MESSAGE)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
        if status['is_whitelisted']:
            await update.message.reply_text(SUBSCRIPTION_MESSAGES['whitelist_user'])
        elif status['has_subscription']:
            expiry = status['subscription_expiry']
            expiry_str = expiry.strftime("%d.%m.%Y %H:%M") if expiry else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            await update.message.reply_text(
                SUBSCRIPTION_MESSAGES['subscription_active'].format(expiry_str)
            )
        else:
            await self.send_subscription_offer(update)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(HELP_MESSAGE)
    
    async def subscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe"""
        user_id = update.effective_user.id
        status = self.subscription_manager.get_user_status(user_id)
        
        if status['is_whitelisted']:
            await update.message.reply_text(SUBSCRIPTION_MESSAGES['whitelist_user'])
        elif status['has_subscription']:
            expiry = status['subscription_expiry']
            expiry_str = expiry.strftime("%d.%m.%Y %H:%M") if expiry else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            await update.message.reply_text(
                SUBSCRIPTION_MESSAGES['subscription_active'].format(expiry_str)
            )
        else:
            await self.send_subscription_offer(update)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        status = self.subscription_manager.get_user_status(user_id)
        
        if status['is_whitelisted']:
            await update.message.reply_text(SUBSCRIPTION_MESSAGES['whitelist_user'])
        elif status['has_subscription']:
            expiry = status['subscription_expiry']
            expiry_str = expiry.strftime("%d.%m.%Y %H:%M") if expiry else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            await update.message.reply_text(
                SUBSCRIPTION_MESSAGES['subscription_active'].format(expiry_str)
            )
        else:
            await self.send_subscription_offer(update)
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        # –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        if query.data == "payment_method_stars":
            await self.send_stars_invoice(update, context)
        elif query.data == "payment_method_card":
            await self.send_card_payment_link(update, context)
        # –°—Ç–∞—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        elif query.data == "buy_subscription":
            await self.show_payment_methods(update, context)
    
    async def show_payment_methods(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        keyboard = [
            [InlineKeyboardButton("‚≠ê Telegram Stars (1 ‚≠ê)", callback_data="payment_method_stars")],
            [InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (150 ‚ÇΩ)", callback_data="payment_method_card")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            SUBSCRIPTION_MESSAGES['payment_method_selection'],
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def send_stars_invoice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á—ë—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram Stars"""
        try:
            chat_id = update.effective_chat.id
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            try:
                await update.callback_query.message.delete()
            except:
                pass
            
            # –°–æ–∑–¥–∞—ë–º —Å—á—ë—Ç –¥–ª—è Telegram Stars
            await context.bot.send_invoice(
                chat_id=chat_id,
                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ö–∞–ª–æ—Ä–∏–π",
                description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π –≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –µ–¥—ã",
                payload="subscription_1_month_stars",
                provider_token="",  # –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è Telegram Stars
                currency="XTR",  # Telegram Stars
                prices=[LabeledPrice("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", self.SUBSCRIPTION_PRICE_STARS)],
                start_parameter="subscription",
                photo_url="https://i.ibb.co/7tQTNpb0/photo-2025-09-28-12-23-13.jpg",
                photo_size=512,
                photo_width=512,
                photo_height=512,
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á—ë—Ç–∞ Telegram Stars: {e}")
            await update.effective_chat.send_message(SUBSCRIPTION_MESSAGES['payment_error'])
    
    async def send_card_payment_link(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞—ë—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ YooMoney (–∫–∞—Ä—Ç–∞)"""
        try:
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ YooKassa
            if not self.payment_manager.is_enabled():
                await update.callback_query.edit_message_text(
                    SUBSCRIPTION_MESSAGES['yoomoney_not_configured'],
                    parse_mode='Markdown'
                )
                return
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            try:
                await update.callback_query.message.delete()
            except:
                pass
            
            # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç–µ–∂
            bot_username = (await context.bot.get_me()).username
            return_url = f"https://t.me/{bot_username}"
            
            payment_data = self.payment_manager.create_payment(
                amount=self.SUBSCRIPTION_PRICE_RUB,
                description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ö–∞–ª–æ—Ä–∏–π - 30 –¥–Ω–µ–π",
                user_id=user_id,
                return_url=return_url
            )
            
            if payment_data and payment_data.get('confirmation_url'):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                payment_id = payment_data['id']
                self.pending_payments[payment_id] = {
                    'user_id': user_id,
                    'created_at': datetime.now(),
                    'notified': False
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
                keyboard = [[InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_data['confirmation_url'])]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.effective_chat.send_message(
                    SUBSCRIPTION_MESSAGES['card_payment_created'],
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
                logger.info(f"Payment link created for user {user_id}, payment_id: {payment_id}")
            else:
                await update.effective_chat.send_message(SUBSCRIPTION_MESSAGES['payment_error'])
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa: {e}")
            await update.effective_chat.send_message(SUBSCRIPTION_MESSAGES['payment_error'])
    
    async def send_invoice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á—ë—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram Stars (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)"""
        await self.send_stars_invoice(update, context)
    
    async def precheckout_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        query = update.pre_checkout_query
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è Telegram Stars
        if query.invoice_payload in ["subscription_1_month", "subscription_1_month_stars"]:
            await query.answer(ok=True)
        else:
            await query.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–ª–∞—Ç—ë–∂")
    
    async def successful_payment_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram Stars"""
        payment = update.message.successful_payment
        user_id = update.effective_user.id
        
        if payment.invoice_payload in ["subscription_1_month", "subscription_1_month_stars"]:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π
            success = self.subscription_manager.add_subscription(user_id, 30)
            
            if success:
                await update.message.reply_text(SUBSCRIPTION_MESSAGES['payment_success'])
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (Telegram Stars)")
            else:
                await update.message.reply_text(SUBSCRIPTION_MESSAGES['payment_error'])
                logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            await update.message.reply_text(SUBSCRIPTION_MESSAGES['payment_error'])
    
    async def analyze_food_image(self, image_data: bytes) -> str:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI GPT-4 Vision API"""
        try:
            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            image_base64 = base64.b64encode(image_data).decode('utf-8')
            
            headers = {
                "Authorization": f"Bearer {OPENAI_API_KEY}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": API_SETTINGS['model'],
                "messages": [
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": FOOD_ANALYSIS_PROMPT
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image_base64}",
                                    "detail": API_SETTINGS['image_detail']
                                }
                            }
                        ]
                    }
                ],
                "max_completion_tokens": API_SETTINGS['max_completion_tokens'],
                "temperature": API_SETTINGS['temperature']
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(OPENAI_API_URL, json=payload, headers=headers) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result['choices'][0]['message']['content']
                    else:
                        error_text = await response.text()
                        logger.error(f"OpenAI API error: {response.status}, {error_text}")
                        return ERROR_MESSAGES['api_error']
                        
        except Exception as e:
            logger.error(f"Error in analyze_food_image: {str(e)}")
            return ERROR_MESSAGES['general_error']
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await self.check_user_access(user_id):
            await self.send_subscription_offer(update)
            return
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            analysis_message = await update.message.reply_text(ANALYSIS_START_MESSAGE)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            file = await context.bot.get_file(photo.file_id)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
            image_data = await file.download_as_bytearray()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            analysis_result = await self.analyze_food_image(bytes(image_data))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            final_message = f"{ANALYSIS_COMPLETE_PREFIX}{analysis_result}"
            await analysis_message.edit_text(final_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in handle_photo: {str(e)}")
            await update.message.reply_text(ERROR_MESSAGES['photo_processing'])
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await self.check_user_access(user_id):
            await self.send_subscription_offer(update)
            return
        
        await update.message.reply_text(ERROR_MESSAGES['not_photo_message'])
    
    async def check_payment_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_payments = [pid for pid, data in self.pending_payments.items() if data['user_id'] == user_id]
        
        if not active_payments:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        for payment_id in active_payments:
            payment_status = self.payment_manager.get_payment_status(payment_id)
            
            if payment_status:
                if payment_status['paid']:
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    success = self.subscription_manager.add_subscription(user_id, 30)
                    
                    if success:
                        # –£–¥–∞–ª—è–µ–º –∏–∑ pending
                        del self.pending_payments[payment_id]
                        await update.message.reply_text(SUBSCRIPTION_MESSAGES['payment_success'])
                        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (YooMoney, payment_id: {payment_id})")
                    else:
                        await update.message.reply_text(SUBSCRIPTION_MESSAGES['payment_error'])
                elif payment_status['status'] == 'pending':
                    await update.message.reply_text(SUBSCRIPTION_MESSAGES['card_payment_pending'])
                elif payment_status['status'] in ['canceled', 'failed']:
                    # –£–¥–∞–ª—è–µ–º –∏–∑ pending
                    del self.pending_payments[payment_id]
                    await update.message.reply_text("–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–æ—à–µ–ª.")
    
    async def periodic_payment_check(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
        logger.info("Starting periodic payment verification task")
        
        while True:
            try:
                await asyncio.sleep(self.PAYMENT_CHECK_INTERVAL)
                
                if not self.pending_payments:
                    continue
                
                logger.info(f"Checking {len(self.pending_payments)} pending payment(s)")
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–ª—é—á–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                payment_ids = list(self.pending_payments.keys())
                
                for payment_id in payment_ids:
                    if payment_id not in self.pending_payments:
                        continue
                    
                    payment_info = self.pending_payments[payment_id]
                    user_id = payment_info['user_id']
                    created_at = payment_info['created_at']
                    notified = payment_info['notified']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                    time_elapsed = (datetime.now() - created_at).total_seconds()
                    if time_elapsed > self.PAYMENT_TIMEOUT:
                        logger.info(f"Payment {payment_id} timed out after {time_elapsed:.0f} seconds")
                        del self.pending_payments[payment_id]
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É–≤–µ–¥–æ–º–∏–ª–∏
                        if not notified:
                            try:
                                await self.application.bot.send_message(
                                    chat_id=user_id,
                                    text="‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∫–æ–º–∞–Ω–¥–æ–π /subscribe",
                                    parse_mode='Markdown'
                                )
                            except Exception as e:
                                logger.error(f"Failed to send timeout notification to user {user_id}: {e}")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                    try:
                        payment_status = self.payment_manager.get_payment_status(payment_id)
                        
                        if not payment_status:
                            logger.warning(f"Could not get status for payment {payment_id}")
                            continue
                        
                        if payment_status['paid']:
                            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                            success = self.subscription_manager.add_subscription(user_id, 30)
                            
                            if success:
                                # –£–¥–∞–ª—è–µ–º –∏–∑ pending
                                del self.pending_payments[payment_id]
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É–≤–µ–¥–æ–º–∏–ª–∏
                                if not notified:
                                    try:
                                        await self.application.bot.send_message(
                                            chat_id=user_id,
                                            text=SUBSCRIPTION_MESSAGES['payment_success'],
                                            parse_mode='Markdown'
                                        )
                                        logger.info(f"Subscription activated for user {user_id} (payment_id: {payment_id})")
                                    except Exception as e:
                                        logger.error(f"Failed to send success notification to user {user_id}: {e}")
                            else:
                                logger.error(f"Failed to activate subscription for user {user_id}")
                        
                        elif payment_status['status'] in ['canceled', 'failed']:
                            logger.info(f"Payment {payment_id} was {payment_status['status']}")
                            del self.pending_payments[payment_id]
                            
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É–≤–µ–¥–æ–º–∏–ª–∏
                            if not notified:
                                try:
                                    await self.application.bot.send_message(
                                        chat_id=user_id,
                                        text=f"‚ùå –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–æ—à–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /subscribe",
                                        parse_mode='Markdown'
                                    )
                                except Exception as e:
                                    logger.error(f"Failed to send cancellation notification to user {user_id}: {e}")
                        
                        else:
                            # –ü–ª–∞—Ç–µ–∂ –≤—Å–µ –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
                            logger.debug(f"Payment {payment_id} status: {payment_status['status']}")
                    
                    except Exception as e:
                        logger.error(f"Error checking payment {payment_id}: {e}")
                        
            except asyncio.CancelledError:
                logger.info("Payment verification task cancelled")
                break
            except Exception as e:
                logger.error(f"Error in periodic payment check: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def handle_yoomoney_webhook(self, webhook_data: dict) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç YooMoney
        
        Args:
            webhook_data: –î–∞–Ω–Ω—ã–µ –æ—Ç YooMoney webhook
            
        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
            if not self.payment_manager.verify_webhook_notification(webhook_data):
                logger.warning("Webhook verification failed or payment not succeeded")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            payment_obj = webhook_data.get("object", {})
            payment_id = payment_obj.get("id")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ –≤ –Ω–∞—à–∏—Ö –∑–∞–ø–∏—Å—è—Ö
            if payment_id not in self.pending_payments:
                logger.warning(f"Payment {payment_id} not found in pending payments")
                return False
            
            payment_info = self.pending_payments[payment_id]
            user_id = payment_info['user_id']
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            success = self.subscription_manager.add_subscription(user_id, 30)
            
            if success:
                # –£–¥–∞–ª—è–µ–º –∏–∑ pending
                del self.pending_payments[payment_id]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await self.application.bot.send_message(
                        chat_id=user_id,
                        text=SUBSCRIPTION_MESSAGES['payment_success'],
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"Failed to send notification to user {user_id}: {e}")
                
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ webhook (payment_id: {payment_id})")
                return True
            else:
                logger.error(f"Failed to activate subscription for user {user_id}")
                return False
                
        except Exception as e:
            logger.error(f"Error handling YooMoney webhook: {e}")
            return False
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
        
        if update and update.message:
            await update.message.reply_text(ERROR_MESSAGES['unexpected_error'])
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("subscribe", self.subscribe_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("check_payment", self.check_payment_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        self.application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        self.application.add_handler(PreCheckoutQueryHandler(self.precheckout_callback))
        self.application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, self.successful_payment_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def post_init(self, application: Application) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        if self.payment_manager.is_enabled():
            self.payment_check_task = asyncio.create_task(self.periodic_payment_check())
            logger.info(f"Periodic payment check started (interval: {self.PAYMENT_CHECK_INTERVAL}s, timeout: {self.PAYMENT_TIMEOUT}s)")
        else:
            logger.info("Payment manager is not enabled, skipping periodic payment check")
    
    async def post_shutdown(self, application: Application) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        if self.payment_check_task and not self.payment_check_task.done():
            self.payment_check_task.cancel()
            try:
                await self.payment_check_task
            except asyncio.CancelledError:
                pass
            logger.info("Periodic payment check stopped")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).post_init(self.post_init).post_shutdown(self.post_shutdown).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.setup_handlers()
        
        logger.info(STARTUP_MESSAGES['bot_starting'])
        logger.info(STARTUP_MESSAGES['instruction'])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ - run_polling —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    if not TELEGRAM_BOT_TOKEN:
        print(TOKEN_ERROR_MESSAGES['telegram_missing'])
        return
    
    if not OPENAI_API_KEY:
        print(TOKEN_ERROR_MESSAGES['openai_missing'])
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = CalorieAnalyzerBot()
    
    try:
        bot.run()
    except KeyboardInterrupt:
        logger.info(STARTUP_MESSAGES['user_stopped'])
    except Exception as e:
        logger.error(f"{TOKEN_ERROR_MESSAGES['critical_error_prefix']}{str(e)}")


if __name__ == "__main__":
    main()
