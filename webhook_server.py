"""
Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç YooMoney

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–æ—Ç YooMoney (YooKassa) –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–µ–π.

–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å nginx –∏–ª–∏ –¥—Ä—É–≥–æ–π reverse proxy.
"""

import os
import json
import logging
import logging.handlers
from aiohttp import web
from dotenv import load_dotenv
from payment_manager import PaymentManager
from subscription_manager import SubscriptionManager
from telegram import Bot

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('logs', exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–ø–∏—Å—å—é –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –§–æ—Ä–º–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(formatter)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
file_handler = logging.handlers.RotatingFileHandler(
    'logs/webhook.log',
    maxBytes=10*1024*1024,  # 10 MB
    backupCount=5,
    encoding='utf-8'
)
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
logger.addHandler(console_handler)
logger.addHandler(file_handler)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º root logger
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[console_handler, file_handler]
)

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

# –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
payment_manager = PaymentManager()
subscription_manager = SubscriptionManager()
bot = None


async def init_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
    global bot
    if not bot:
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
    return bot


async def handle_yoomoney_webhook(request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç YooMoney
    
    POST /webhook/yoomoney
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = await request.json()
        
        logger.info(f"Received webhook: {json.dumps(data, indent=2)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
        if not payment_manager.verify_webhook_notification(data):
            logger.warning("Webhook verification failed or payment not succeeded")
            return web.Response(status=400, text="Invalid webhook")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        payment_obj = data.get("object", {})
        payment_id = payment_obj.get("id")
        metadata = payment_obj.get("metadata", {})
        user_id_str = metadata.get("user_id")
        
        if not user_id_str:
            logger.error("No user_id in payment metadata")
            return web.Response(status=400, text="No user_id in metadata")
        
        user_id = int(user_id_str)
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        success = subscription_manager.add_subscription(user_id, 30)
        
        if success:
            logger.info(f"Subscription activated for user {user_id} (payment_id: {payment_id})")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text="üéâ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞!",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Failed to send notification to user {user_id}: {e}")
            
            return web.Response(status=200, text="OK")
        else:
            logger.error(f"Failed to activate subscription for user {user_id}")
            return web.Response(status=500, text="Failed to activate subscription")
            
    except json.JSONDecodeError:
        logger.error("Invalid JSON in webhook request")
        return web.Response(status=400, text="Invalid JSON")
    except Exception as e:
        logger.error(f"Error handling webhook: {e}")
        return web.Response(status=500, text="Internal server error")


async def health_check(request):
    """Healthcheck endpoint"""
    return web.json_response({
        "status": "ok",
        "service": "yoomoney-webhook",
        "payment_manager_enabled": payment_manager.is_enabled()
    })


async def on_startup(app):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    await init_bot()
    logger.info("Webhook server started")
    logger.info(f"YooMoney integration: {'enabled' if payment_manager.is_enabled() else 'disabled'}")


async def on_cleanup(app):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("Webhook server shutting down")


def create_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = web.Application()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç—ã
    app.router.add_post('/webhook/yoomoney', handle_yoomoney_webhook)
    app.router.add_get('/health', health_check)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)
    
    return app


def main():
    """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN not found in environment variables")
        return
    
    if not payment_manager.is_enabled():
        logger.warning("YooMoney payment manager is not enabled (missing credentials)")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    host = os.getenv("WEBHOOK_HOST", "0.0.0.0")
    port = int(os.getenv("WEBHOOK_PORT", "8080"))
    
    logger.info(f"Starting webhook server on {host}:{port}")
    logger.info(f"Webhook URL will be: http://your-domain.com:{port}/webhook/yoomoney")
    logger.info("Remember to configure this URL in YooMoney dashboard!")
    
    app = create_app()
    web.run_app(app, host=host, port=port)


if __name__ == "__main__":
    main()

